version: 2.1

executors:
    golang:
        parameters:
            version:
                type: string
        docker:
            - image: circleci/golang:<< parameters.version >>

commands:
    get_deps:
        description: "Get go dependencies"
        steps:
            - run: go get github.com/jstemmer/go-junit-report
            - run: go get github.com/davecgh/go-spew/spew
            - run: go get gopkg.in/yaml.v2
            - run: go get github.com/BurntSushi/toml

jobs:
    go1_11:
        executor:
            name: golang
            version: "1.11"
        working_directory: /go/src/github.com/pelletier/go-toml
        steps:
            - checkout
            - run: mkdir -p /tmp/workspace
            - run: go fmt ./...
            - get_deps
            - run: mkdir -p /tmp/test-results/go-toml
            - run:
                name: Run unit tests
                command: |
                    trap "go-junit-report </tmp/test-results/go-test.out > /tmp/test-results/go-toml/go-test-report.xml" EXIT
                    go test -race -v -coverprofile=/tmp/workspace/coverage.txt -covermode=atomic | tee /tmp/test-results/go-test.out
            - run: mkdir -p /tmp/test-results/tomljson
            - run:
                name: Run tomljson unit tests
                command: |
                    trap "go-junit-report </tmp/test-results/go-test.out > /tmp/test-results/tomljson/go-test-report.xml" EXIT
                    go test github.com/pelletier/go-toml/cmd/tomljson -race -v | tee /tmp/test-results/go-test.out
            - run: mkdir -p /tmp/test-results/tomll
            - run:
                name: Run tomll unit tests
                command: |
                    trap "go-junit-report </tmp/test-results/go-test.out > /tmp/test-results/tomll/go-test-report.xml" EXIT
                    go test github.com/pelletier/go-toml/cmd/tomll -race -v | tee /tmp/test-results/go-test.out
            - run: mkdir -p /tmp/test-results/query
            - run:
                name: Run query unit tests
                command: |
                    trap "go-junit-report </tmp/test-results/go-test.out > /tmp/test-results/query/go-test-report.xml" EXIT
                    go test github.com/pelletier/go-toml/query -race -v | tee /tmp/test-results/go-test.out
            - store_test_results:
                path: /tmp/test-results
    codecov:
        docker:
            - image: "circleci/golang:1.12"
        steps:
            - attach_workspace:
                at: /tmp/workspace
            - run:
                name: "upload to codecov"
                working_directory: /tmp/workspace
                command: bash <(curl -s https://codecov.io/bash)

workflows:
    version: 2.1
    test_all:
        jobs:
            - go1_11
#           - codecov:
#               requires:
#                   - go1_11
